#!/usr/bin/env ruby
# encoding: utf-8

def resolve_reg(s)
  case s
  when 'r0'
    0
  when 'r1'
    1
  when 'r2'
    2
  when 'r3'
    3
  when 'r4'
    4
  when 'r5'
    5
  when 'r6'
    6
  when 'r7'
    7
  else
    raise "Unknown register: #{s}"
  end
end

def parse_imm(s)
  case s
  when /\A0x/
    s.to_i(16)
  else
    s.to_i(10)
  end
end

def label?(s)
  s =~ /\A@/
end

def parse_label(s, labels)
  res = labels[s[1..-1]]
  if res.nil?
    raise "Unknown label: #{s}"
  else
    res
  end
end

def handle_instruction(instr, program, labels)
  case instr[0]
  when 'nop'
    program << 0x00
  when 'addi'
    program << 0x01
    program << resolve_reg(instr[1])
    program << parse_imm(instr[2])
  when 'mod'
    program << 0x02
    program << resolve_reg(instr[1])
    program << resolve_reg(instr[2])
  when 'mov'
    program << 0x03
    program << resolve_reg(instr[1])
    program << resolve_reg(instr[2])
  when 'jrz'
    program << 0x04
    program << resolve_reg(instr[1])
    if label?(instr[2])
      if labels
        here = program.size
        there = parse_label(instr[2], labels)
        program << there - here + 2 # 2, to take this instruction size into account
      else
        program << 0x00 # tmp
      end
    else
      program << parse_imm(instr[2])
    end
  when 'movi'
    program << 0x05
    program << resolve_reg(instr[1])
    program << parse_imm(instr[2])
  when 'jrb'
    program << 0x06
    if label?(instr[1])
      if labels
        here = program.size
        there = parse_label(instr[1], labels)
        program << here - there - 1
      else
        program << 0x00 # tmp
      end
    else
      program << parse_imm(instr[1])
    end
  when 'halt'
    program << 0x07
  when 'mod2'
    program << 0x08
    program << resolve_reg(instr[1])
    program << resolve_reg(instr[2])
    program << resolve_reg(instr[3])
  else
    raise "Unknown instruction name: #{instr[0]}"
  end
end

lines = File.readlines(ARGV[0])

labels = {}

# First pass
program = []
lines.each do |line|
  if line =~ /\A\s+/
    # Instruction
    instr = line.strip.split(/ +/)
    handle_instruction(instr, program, nil)
  else
    # Label
    label = line.strip
    labels[label] = program.size
  end
end

# Second pass
program = []
lines.each do |line|
  if line =~ /\A\s+/
    # Instruction
    instr = line.strip.split(/ +/)
    handle_instruction(instr, program, labels)
  end
end

print program.pack('C*')
